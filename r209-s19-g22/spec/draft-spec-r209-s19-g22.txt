



                                                             G. Quintana
                                                                 P. Tula
                                                          IMT-Atlantique
                                                          August 1, 2019


                  Group 22: c2w protocol specification
                     draft-ietf-xml2rfc-template-05

Abstract

   Sample protocol specification for the text-based version of the Chat
   While Watching (c2w) application.  The goal of this application is to
   create a simple client-server system that allows users to join two
   different kinds of sessions (Main Room and Movie Room) and where they
   can chat.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   1
   2.  Protocol overview . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Messages format . . . . . . . . . . . . . . . . . . . . . . .   2
   4.  Messages's commands . . . . . . . . . . . . . . . . . . . . .   3
   5.  Error codes . . . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  Example scenario  . . . . . . . . . . . . . . . . . . . . . .   7
     6.1.  Scenario 1: Log in  . . . . . . . . . . . . . . . . . . .   7
     6.2.  Scenario 2: Entering a session into the Main Room
           interface . . . . . . . . . . . . . . . . . . . . . . . .   8
     6.3.  Scenario 3: Sending a message into the Main Room chat
           area  . . . . . . . . . . . . . . . . . . . . . . . . . .   9
     6.4.  Scenario 4: Openning a Movie Room Session . . . . . . . .   9
     6.5.  Scenario 5: Sending a message in the Movie Room chat area  10
     6.6.  Scenario 6: Leaving the Movie Room Session  . . . . . . .  10
     6.7.  Scenario 7: Leave Main Room Session . . . . . . . . . . .  11
     6.8.  Scenario 8: Sending a message in the Movie Room chat area
           fails . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   7.  Conclusion  . . . . . . . . . . . . . . . . . . . . . . . . .  12
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   The c2w application's communication protocol will support the
   interactions between the server and the client interfaces in the
   system.  The clients and the server will communicate by sending
   requests and responses to reply to the resquests.  These interactions
   will lie on text-based packets, also named messages, that can either
   flow through UDP or TCP in the transport layer.




Quintana & Tula         Expires February 2, 2020                [Page 1]

                       c2w protocol specification            August 2019


   The application will provide three distinct graphic user interfaces
   (GUI) for the user to interact with: Login, Main Room and Movie Room.
   Each interface constitutes the Client interface and all the services
   provided will be catered by the Server through this protocol.

2.  Protocol overview

   In order to introduce the communication between the client interface
   (frontend) and server interface (backend) of our application, we've
   designed a text-based messaging communication protocol that ensures a
   good performance and reliability of the messaging service.  The
   cornerstone of this protocol is the general message-format that it is
   commited in every transmission of the system, either by the server or
   by the client.  Nevertheless, the nature of the message is specified
   by an argument named CMD (Command).  Depending on the command's type
   the message's packet will provide a particular information.  Lastly,
   the system's realability lies on the persistence of the message's
   transmission.  For instance, every packet sent must be answered back
   with an acknowledgement packet that endorses the sender that the
   message has been well received.  If this acknowledgement packet it is
   not received back by the sender withi an certain time, it will insist
   by sending the original packet again.  After 3 frustrated attempts
   the sender will raise an error message in his interface and abort the
   procedure.

3.  Messages format

   All the messages have the same format:

           TIME: <SPACE> CMD <PIPE> USER_NAME <PIPE> DATA < CRLF >

   Where SPACE is a single white space (ASCII decimal code 32) and PIPE
   is the separator character of the CSV format (ASCII decimal code
   124), CR represents the ASCII character "Carriage Return" (ASCII
   decimal code 13) and LF represents the ASCII character "Line Feed"
   (ASCII decimal code 10).

   TIME

          For requests (i.e., messages send by a client) this is the
          time at which the request was sent, expressed as the number of
          seconds since January 1st, 1970.  For responses, (i.e., a
          message from the server to the client), the TIME field must be
          the same as the TIME field of the corresponding request.

   CMD





Quintana & Tula         Expires February 2, 2020                [Page 2]

                       c2w protocol specification            August 2019


          This field indicates the message type and it's detailed
          further in this specification.

   USER_NAME

          For requests and responses, this is the user name of the
          client that originated the message.

   DATA

          This field changes depending on the message type and its
          content is detailed further in this specification.

4.  Messages's commands

   This section lists, describes and explains all the possible commands
   that messages can have.  Additionally, it is explained how the
   message is configurated for each case.

   CONNECTION_REQUEST

          Through this command the client sends to the server a request
          to log into the application.  In this case, the DATA field is
          an empty string.

   CONNECTION_GRANTED

          Through this command the server sends to the client a message
          granting its access to the application.  In this case, the
          DATA field is an empty string.

   CONNECTION_ERROR_XXX

          If access to the application is not granted by the server this
          command is sent by the server to refuse the user's connexion/.
          XXX references to the error code.  In this case, the DATA
          field is an empty string.

   CONNECTION_RESPONSE_ACK

          Once the client received the server (CONNECTION_GRANTED or
          CONNECTION_ERROR_XXX), it replies back sending a message
          holding the command CONNECTION_RESPONSE_ACK to acknowledge its
          reception.  In this case, the DATA field is an empty string.

   USER_LIST_REQUEST





Quintana & Tula         Expires February 2, 2020                [Page 3]

                       c2w protocol specification            August 2019


          Through this command the client asks the server the list of
          all users in the system and their status ("A" when they are
          available and "M" when they are in a movie room).  In this
          case, the DATA field is an empty string.

   USER_LIST_RESPONSE

          This command is the response to the previous one.  Its DATA
          field contains the list of all the users in the following
          format:

          USER_1 <COMA> ST_1 <COMA>...<COMA> USER_N <COMA> ST_N

          Where COMA is the separator character (ASCII decimal code 44).
          USER_N reprents the name of user number N and ST_N its status
          on the application.  The status takes the value 'M' when the
          user is in Movie Room or 'A' when he is in the Main Room.
          This command is also used anytime the server needs to update
          the clients user list.

   USER_LIST_RESPONSE_ACK

          This command is used by the client to acknowledge the user
          list sent by the server.  In this case, the DATA field is an
          empty string.

   MOVIE_LIST_REQUEST

          Through this command the client asks the server the list of
          movies in the system.  In this case, the DATA field of the
          message is an empty string.

   MOVIE_LIST_RESPONSE

          This command is the response to the previous one.  Its DATA
          field contains the list of the movies and their associated IP
          addresses and port numbers in the following payload format:

          MOVIE_1 <COMA> IP_1 <COMA> PORT_1 <COMA>...<COMA> MOVIE_N
          <COMA> IP_N <COMA> PORT_N

          Where COMA is the separator character (ASCII decimal code 44),
          MOVIE_N is the name of the movie number N and IP_N and PORT_N
          are its respective ip address and port number.  This command
          is also used any time the server needs to update its movie
          list.

   MOVIE_LIST_RESPONSE_ACK



Quintana & Tula         Expires February 2, 2020                [Page 4]

                       c2w protocol specification            August 2019


          This command is used by the client to acknowledge the movie
          list sent by the server.  The DATA field of the message is an
          empty string.

   LEAVE_SESSION_REQUEST

          Through this command the client asks the server to leave the
          system.  The DATA field of the message is an empty string.

   LEAVE_SESSION_XXXX

          This command is the response to the previous one.  If the
          server allows this operation, the XXXX is replaced by GRANTED.
          Otherwise, XXXX is replaced by ERROR_YYY, where YYY is the
          error code.  The DATA field is an empty string.

   LEAVE_SESSION_RESPONSE_ACK

          This command is used to acknowledge the LEAVE_SESSION_GRANTED
          and LEAVE_SESSION_ERROR_XXX commands sent by the server.  The
          DATA field of the message is an empty string.

   SEND_MESSAGE_REQUEST

          Through this command the client sends a new message to its
          current chat area.  The USER_NAME field has the user name of
          the client.  The DATA field is filled with this message.

   NEW_MESSAGE

          Through this command the server updates the chat area of all
          connected users when some user posts a message.  The USER_NAME
          field has the user name of the message's author.  The DATA
          field is filled with this message.

   NEW_MESSAGE_RESPONSE_ACK

          This command is used by each client to acknowledge the arrival
          of a new message.  The DATA field is an empty string.

   ENTER_MOVIE_REQUEST

          Through this command the client asks the server to join a
          movie session.  The DATA field is filled with the movie name.

   ENTER_MOVIE_XXXX





Quintana & Tula         Expires February 2, 2020                [Page 5]

                       c2w protocol specification            August 2019


          This command is the response to the previous one.  If the
          server allows this operation, the XXXX is replaced by GRANTED.
          Otherwise, XXXX is replaced by ERROR_YYY, where YYY is the
          error code.  The DATA field of the message is an empty string.

   ENTER_MOVIE_RESPONSE_ACK

          This command is used to acknowledge the ENTER_MOVIE_GRANTED
          and ENTER_MOVIE_ERROR_XXX commands sent by the server.The DATA
          field of the message is an empty string.

5.  Error codes

   The c2w communication protocol attemps to support the errors status
   code from HTTP status-code standard.

   The HTTP status-Code element in a server response is a 3-digit
   integer where the first digit of the Status-Code defines the class of
   response and the last two digits do not have any categorization role.
   There are 5 values for the first digit, however, in c2w protocol
   there are any used 2:

   4xx: Client Error

          It means the request contains incorrect syntax or cannot be
          fulfilled.

   5xx: Server Error

          It means the server failed to fulfill an apparently valid
          request.

   Given below is a list of all the status codes.

   400 Bad Request

          The server did not understand the request.

   401 Unauthorized

          The requested page needs a username and a password.

   403 Payment Required

          Access is forbidden to the requested page.

   404 Not Found




Quintana & Tula         Expires February 2, 2020                [Page 6]

                       c2w protocol specification            August 2019


          The server can not find the requested page.

   405 Method Not Allowed

          The method specified in the request is not allowed.

   408 Request Timeout

          The request took longer than the server was prepared to wait.

   410 Gone

          The requested page is no longer available.

   413 Request Entity Too Large

          The server will not accept the request, because the request
          entity is too large.

   500 Internal Server Error

          The request was not completed.  The server met an unexpected
          condition.

   501 Not Implemented

          The request was not completed.  The server did not support the
          functionality required.

   503 Service Unavailable

          The request was not completed.  The server is temporarily
          overloading or down.

   504 Gateway Timeout

          The gateway has timed out.

6.  Example scenario

6.1.  Scenario 1: Log in

   At 3:35 PM on March 3rd 2010, a client would like to log in with the
   name "django".  Its IP address and Port number are: 127.0.0.2 and
   8080.  The message sent by the client is:

      1267626900: CONNECTION_REQUEST|django|CRLF




Quintana & Tula         Expires February 2, 2020                [Page 7]

                       c2w protocol specification            August 2019


   If the server allows this log in, it sends to the client the
   following message:

      1267626900: CONNECTION_GRANTED|django|CRLF

   Otherwise, the server replies the client's message with the following
   packet:

      1267626900: CONNECTION_ERROR_XXX|django|CRLF

   Where XXX references to the corresponding error code.  Finally, the
   client acknowledges the server's message by sending:

      1267626900: CONNECTION_RESPONSE_ACK|django|CRLF

6.2.  Scenario 2: Entering a session into the Main Room interface

   After the client's successful log in, the application needs the user
   and movie lists in order to correctly show them in the Main Room
   window.  For that purpose, the client sends to the server the
   following requests:

      1267626903: USER_LIST_REQUEST|django|CRLF

      1267626903: MOVIE_LIST_REQUEST|django|CRLF

   Supposing that the users connected to the system are colLanda
   (watching a movie), MrCandy (watching a movie), drKingSchultz
   (available) and vincentVega (available) and that the available movies
   are Hateful Eight, Pulp Fiction and Kill Bill vol 1, the server then
   answers to the client through the following message:

      1267626903:
      USER_LIST_RESPONSE|django|colLanda,M,MrCandy,M,drKingSchultz,A,
      vincentVega,A,django,ACRLF

   This message is also sent to all the clients in the Main Room for
   they to update theirs user lists.  Then, every client acknowledges
   the server message by answering:

      1267626903: USER_LIST_RESPONSE_ACK|<user_name>|CRLF

   Where <user_name> is the name of the user replying to the server.
   The server then sends the following message only to django:

      1267626903: MOVIE_LIST_RESPONSE|django|Hateful
      Eight,1.1.1.0,8080,Pulp Fiction,1.1.2.0,8080, KIll Bill vol
      1,1.1.1.4,8080CRLF



Quintana & Tula         Expires February 2, 2020                [Page 8]

                       c2w protocol specification            August 2019


   Finally, django acknowledges the server's message by answering:

      1267626903: MOVIE_LIST_RESPONSE_ACK|django|CRLF

6.3.  Scenario 3: Sending a message into the Main Room chat area

   The client with the user name "django" now sends the following
   message to the Main Room's chat area: "English motherf*cker!  Do you
   speak it?".  Therefore, the client submits the following message:

      1267627000: SEND_MESSAGE_REQUEST|django|English motherf*cker!  Do
      you speak it?CRLF

   After receiving the message, the server broadcast to all the users in
   the Main Room the following message:

      1267627000: NEW_MESSAGE|django|English motherf*cker!  Do you speak
      it?CRLF

   All the users in the Main Room receive this message (including the
   one who sent the message) and update their Main Room's chat area with
   that new message.  Then, they acknowledge the it by sending the
   following message:

      1267627000: NEW_MESSAGE_RESPONSE_ACK|<user_name>|CRLF

   Where <user_name> is the name of the user replying to the server.

6.4.  Scenario 4: Openning a Movie Room Session

   The client now wishes to watch the movie "Kill Bill vol 1".  The
   clients colLanda and MrCandy are currently in that Movie Room.  The
   client sends to the server the following message:

      1267628000: ENTER_MOVIE_REQUEST|django|Kill Bill vol 1CRLF

   If the server gives him access to that movie, it replies with:

      1267628000: ENTER_MOVIE_GRANTED|django|Kill Bill vol 1CRLF

   If not, it replies with:

      1267628000: ENTER_MOVIE_ERROR_XXX|django|Kill Bill vol 1CRLF

   Where XXX references the error code.  At the end, the django client
   acknowledges the server's message by:

      1267628000: ENTER_MOVIE_RESPONSE_ACK|django|CRLF



Quintana & Tula         Expires February 2, 2020                [Page 9]

                       c2w protocol specification            August 2019


   If the client was allowed to get into this session, all the other
   clients receive the following message, that changes to "M" the state
   of the client that just entered the Movie Room:

      1267628000:
      USER_LIST_RESPONSE|django|colLanda,M,MrCandy,M,drKingSchultz,
      A,vincentVega,A,django,MCRLF

   Finally, all the clients acknowledge the server's message by sending:

      1267628000: USER_LIST_RESPONSE_ACK|<user_name>|CRLF

   Where <user_name> is the name of the user replying to the server.

6.5.  Scenario 5: Sending a message in the Movie Room chat area

   Supposing the client got access to that movie, it now wants to sends
   the following message to the Movie Room's chat area: "The spider just
   caught himself a couple of flies...".  The message that django's
   client sends then, it is:

      1267629000: SEND_MESSAGE_REQUEST|django|The spider just caught
      himself a couple of flies...CRLF

   After receiving this message, the server broadcast it to all the
   users in the Movie Room through the following message:

      1267629000: NEW_MESSAGE|django|The spider just caught himself a
      couple of flies...CRLF

   All the users in the Movie Room receive this message and then they
   update their Movie Room's chat area with that new message.  Finally,
   all the clients (including the one who sent the message) acknowledge
   the server message by sending:

      1267629000: NEW_MESSAGE_RESPONSE_ACK|<user_name>|CRLF

   Where <user_name> is the name of the user replying to the server.

6.6.  Scenario 6: Leaving the Movie Room Session

   The client now wants to leave the Movie Room session.  It sends the
   following message to the server:

      1267630000: LEAVE_SESSION_REQUEST|django|CRLF

   If the server allows this operation, it replies him back with:




Quintana & Tula         Expires February 2, 2020               [Page 10]

                       c2w protocol specification            August 2019


      1267630000: LEAVE_SESSION_GRANTED|django|CRLF

   And it sends to all the other clients the following message (changing
   the state of django), for they to update theirs user list:

      1267630000:
      USER_LIST_RESPONSE|django|colLanda,M,MrCandy,M,drKingSchultz,A,
      vincentVega,A,django,ACRLF

   All the clients acknowledge the server's message by sending:

      1267628000: USER_LIST_RESPONSE_ACK|<user_name>|CRLF

   If the client is not allowed to leave the session, the server replies
   with:

      1267630000: LEAVE_SESSION_ERROR_XXX|django|CRLF

   Where XXX references the error code.  The client then acknowledges
   this message by sending:

      1267630000: LEAVE_SESSION_RESPONSE_ACK|django|CRLF

6.7.  Scenario 7: Leave Main Room Session

   The client finally wants to leave the Main Room Session.  It sends
   the following message:

      1267640000: LEAVE_SESSION_REQUEST|django|CRLF

   If the server allows this operation, it replies it with:

      1267640000: LEAVE_SESSION_GRANTED|django|CRLF

   And it sends to all the other clients the following message, for them
   to update theirs user list:

      1267640000:
      USER_LIST_RESPONSE|django|colLanda,M,MrCandy,M,drKingSchultz,
      A,vincentVega,ACRLF

   All the clients acknowledge the server's message by sending:

      1267640000: USER_LIST_RESPONSE_ACK|<user_name>|CRLF

   Where <user_name> is the name of the user replying to the server.





Quintana & Tula         Expires February 2, 2020               [Page 11]

                       c2w protocol specification            August 2019


   If the client is not allowed to leave the session, the server replies
   with:

      1267640000: LEAVE_SESSION_ERROR_XXX|django|CRLF

   Where XXX references the error code.  The client then acknowledges
   the reception of the server's message with:

      1267640000: LEAVE_SESSION_RESPONSE_ACK|django|CRLF

6.8.  Scenario 8: Sending a message in the Movie Room chat area fails

   Supposing the client got access to that movie, it now wants to send
   the following message to the Movie Room's chat area: "that's a
   bingo!".  The message that the client sends then, it is:

      1267650000: SEND_MESSAGE_REQUEST|django|that's a bingo!CRLF

   The server doesn't answer back in 5 seconds timeout.  The client
   insists by sending again the message.

      1267650000: SEND_MESSAGE_REQUEST|django|that's a bingo!CRLF

   The server doesn't answer back again and after 5 seconds the client
   tries sending the message again.  However, the server doesn't
   replies.  The client tries by third time after waiting 5 seconds.
   The server doesn't answer again.  The client then raises an error to
   the user interface telling it that the server is not reachable and
   stops trying to send the message.

7.  Conclusion

   The c2w protocol ensures the robustness and reliability of the
   communication of the application.  Thanks to this detailed
   specification document, it will be easy and straightforward to
   develop and implement it.

Authors' Addresses

   Gonzalo Inaki Quintana
   IMT-Atlantique
   655 Avenue du Technopole
   Plouzane, Bretagne  29280
   France

   Email: gonzalo-inaki.quintana@imt-atlantique.net





Quintana & Tula         Expires February 2, 2020               [Page 12]

                       c2w protocol specification            August 2019


   Patricio Alejandro Tula
   IMT-Atlantique
   655 Avenue du Technopole
   Plouzane, Bretagne  29280
   France

   Email: tula.patricio@imt-atlantique.net












































Quintana & Tula         Expires February 2, 2020               [Page 13]
